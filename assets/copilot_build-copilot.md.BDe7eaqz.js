import{_ as t,c as e,o as s,a4 as i,aM as a,aN as l,aO as n}from"./chunks/framework.BGFi9fUZ.js";const b=JSON.parse('{"title":"Build a copilot backend","description":"","frontmatter":{},"headers":[],"relativePath":"copilot/build-copilot.md","filePath":"copilot/build-copilot.md","lastUpdated":1693807898000}'),o={name:"copilot/build-copilot.md"},p=i('<h1 id="build-a-copilot-backend" tabindex="-1">Build a copilot backend <a class="header-anchor" href="#build-a-copilot-backend" aria-label="Permalink to &quot;Build a copilot backend&quot;">​</a></h1><p>This guide will demonstrate how to build a copilot backend, or simply chatbot, using the OpenCUI platform, taking OpenCUI copilot as an example. The OpenCUI copilot is designed to provide onboarding and feature discovery for causal chatbot developer. Copilot is a special chatbot in that it helps user indirectly instead of doing things directly on user&#39;s behalf.</p><p>To gain a basic understanding, it is important to first learn <a href="./../reference/guide/concepts.html">key concepts</a> about <a href="https://opencui.io/essentials/#cui-creates-callable-instances" target="_blank" rel="noreferrer">type systems</a> and dialog annotations. Unlike other flow based approach, OpenCUI allow you to build effective conversational user interface in a schema grounded fashion, based on the observation that all user interaction are designed to create function object based on user input. This object can then be invoked to deliver the service to user. Under this approach, it is all about defining the type and attach dialog annotation to make that type, including primitive type(entities), composite type(frames) and function(skills), instantiable via conversation. These dialog annotations specify how builders want each slot, also known as component or member data, can be instantiated through conversation, and OpenCUI runtime will manage the conversation so that your bot can deliver the service to user as quickly as possible.</p><h3 id="build-entities" tabindex="-1">Build entities <a class="header-anchor" href="#build-entities" aria-label="Permalink to &quot;Build entities&quot;">​</a></h3><p>In this tutorial, we will thus describe the types needed to build a copilot for OpenCUI itself. Since the main objects that builders work with on the platform are entity, frame and skill, we need to introduce some entities that so builders can talk about them. For instance, an entity called &quot;FrameType&quot; is created to identify all frames and skills. The full list of the entity types we introduce is as follows.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><p>Create the following entities:</p><ul><li><code>FrameType</code>: It represents the frame and skill types in current projects.</li><li><code>EntityType</code>: It represents the entity types in current projects.</li><li><code>SlotEntity</code>: It represents the slots in current projects.</li></ul></details><p>Note, because each project on OpenCUI had different types, these three entity types need to be declared as dynamic so that the instance is pushed at runtime from actual chatbot. But for most application, you only need static entities.</p><h3 id="build-frame-for-context" tabindex="-1">Build frame for context <a class="header-anchor" href="#build-frame-for-context" aria-label="Permalink to &quot;Build frame for context&quot;">​</a></h3><p>Each application requires different data structure to capture the current interaction state, conceptually a stack of GUI pages. For OpenCUI, since builder are mainly work with types and their slots, and types are organized into projects and organizations, we introduce a frame called &quot;<a href="https://build.opencui.io/org/ai.bethere/agent/copilot/struct/frame/64b8cd8d459bf49540e3dd9e" target="_blank" rel="noreferrer">PageContext</a>&quot; and add slots like orgLabel, agentLabel, and page in this frame. Additionally, we add a typeLabel slot with type FrameType. The OpenCUI copilot frontend can encode the state of current user session into frame event, so context<br> of &quot;PageContext&quot; frame will be automatically filled for each turn.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Create a frame with label <code>PageContext</code>.</p></li><li><p>Add the following slots in this frame:</p><ul><li><code>orgLabel</code> with type <code>String</code></li><li><code>agentLabel</code> with type <code>String</code></li><li><code>page</code> with type <code>String</code></li><li><code>typeLabel</code> with type <code>FrameType</code></li><li>...</li></ul></li></ol></details><h2 id="build-skills-to-help-user" tabindex="-1">Build skills to help user <a class="header-anchor" href="#build-skills-to-help-user" aria-label="Permalink to &quot;Build skills to help user&quot;">​</a></h2><p>Skills are functionalities that can be triggered by users through natural language requests. This section illustrates the process of building a conversational experience to guide user through <a href="./../reference/guide/clone-simple-chatbot.html">cloning an echo chatbot</a>.</p><h3 id="build-clone-skill" tabindex="-1">Build clone skill <a class="header-anchor" href="#build-clone-skill" aria-label="Permalink to &quot;Build clone skill&quot;">​</a></h3><p>To build a skill that can be triggered conversationally, follow these steps:</p><ol><li>Create a new skill and add the expression to trigger it.</li><li>Add context if it&#39;s required.</li><li>Add parameters needed to execute a specific action.</li><li>Add a slot to verify if the app users are in the target state or on the target page.</li><li>Specify the action(s) for app users to execute.</li></ol><p>Instead of building everything from scratch, OpenCUI allows you to build bigger conversational experience by compose smaller ones together. Let&#39;s consider the <a href="https://build.opencui.io/org/ai.bethere/agent/quickstarts/en/intent/64b897ae0f50353c647ca7e1" target="_blank" rel="noreferrer">CloneProject</a> skill used to guide app users in cloning a project. The happy path for CloneProject skill involves the following steps:</p><p><img src="'+a+`" alt="Happy path of CloneProject skill"></p><p>Let&#39;s see how to build this skill by following the above steps.</p><p><strong>1. Create a new skill: CloneProject</strong></p><p>In chatbot <em>ai.bethere.quickstarts</em>, we create a new skill with label CloneProject and add expression to trigger it.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li>Create a skill with label <code>CloneProject</code>.</li><li>Add the following expressions of this skill: <ul><li><em>How to clone a project?</em></li><li><em>How to clone a $type$?</em></li></ul></li></ol></details><p><strong>2. Add context</strong></p><p>Suppose the action can only be executed when the app user is already on the target page. Therefore, in each component skill, we add a context slot with the type &quot;PageContext&quot; to get the current page.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><p>Add the following slot in skill CloneProject:</p><ul><li><code>context</code> with type <code>PageContext</code></li></ul></details><p><strong>3. Add parameters required for the skill</strong></p><p>There are two ways to clone a project:</p><ul><li>Enter the target project and click the Clone button to clone it.</li><li>Enter an organization, click the Create button, select the type, and change the clone mode to Clone from.</li></ul><p>Since OpenCUI copilot does not support cross-organizational operation for now, copilot can only assist app users in cloning projects using the second method. The parameters required to clone a project include the project type, organization, and label of the target project.</p><p>To determine the project type, we created the entity &quot;ProjectType&quot; and added a slot with this type, so copilot can prompt app users to select the project type. However, DU currently cannot understand the organization and project labels. Therefore, only the project type can be obtained from the app users.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Add the following slots in skill CloneProject:</p><ul><li><code>type</code> with type <code>ProjectType</code></li><li><code>orgLabel</code> with type <code>String</code></li><li><code>projectLabel</code> with type <code>String</code></li></ul></li><li><p>Add annotations for slot type:</p><ul><li><strong>Fill strategy</strong>: Always ask</li><li><strong>Prompt</strong>: <em>Which kind of project would you like to clone?</em></li></ul></li></ol></details><p><strong>4. Add slot to verify the current page</strong></p><p>As we can obtain the current page through the context slot, we add a boolean slot called isTargetPage. It is initialized as true if the app users are on the target page, and false otherwise. We also add a <a href="./../reference/annotations/valuecheck.html">value check</a> annotation. If the app users are not on the target page, we provide an action button for them to navigate to the target page.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Add the following slot in skill CloneProject:</p><ul><li><code>isTargetPage</code> with type <code>boolean</code></li></ul></li><li><p>Add annotations for slot isTargetPage:</p><ul><li><strong>Fill strategy</strong>: Always ask</li><li><strong>Initialization</strong>:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (context?.page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;agentList&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><ul><li><strong>Prompt</strong>: <em>Have you navigated to the project list page?</em></li><li><strong>Value check</strong>: <ul><li><strong>Condition</strong>:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isTargetPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><ul><li><strong>Template</strong>:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rich&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;To clone a \${type!!.expression()}, click the button below to go to the project list page first.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;insideAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;display&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Take me there&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;payload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;clickAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;targetPage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;agentList&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;orgLabel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${context?.orgLabel}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol></details><p><strong>5. Add response (frontend action button)</strong></p><p>Finally, after collecting all the required parameters, we can generate an action button to clone a project. Since the app users cannot fill the orgLabel and projectLabel slots, the default action of this skill will not mention the target organization and project. However, if these slots are initialized by other composite skills, there is a chance that they can be filled. Therefore, we added a branch to handle that situation.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Add a default response in skill CloneProject:</p><ul><li><strong>Action</strong>: Single value message</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rich&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;To clone the </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${projectLabel}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \${type!!.expression()}, please follow these steps:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. Start by clicking the button below:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;insideAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;display&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Create \${type!!.expression()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;payload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;clickAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;targetAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;createProject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;projectType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${type!!.value}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>Action</strong>: Single value message</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>2. In the &quot;Create mode&quot; section, select &quot;Clone from&quot;.</span></span>
<span class="line"><span>3. Select organization: &quot;\${orgLabel}&quot;.</span></span>
<span class="line"><span>4. Select project: &quot;\${projectLabel}&quot;.</span></span>
<span class="line"><span>5. Click the &quot;Clone&quot; button.</span></span></code></pre></div></li><li><p>Enable branch in the response of skill CloneProject.</p></li><li><p>Add a branch response in skill CloneProject:</p><ul><li><strong>Condition</strong>:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">orgLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> projectLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span></code></pre></div><ul><li><strong>Action</strong>: Single value message</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rich&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;To clone a \${type!!.expression()}, please follow these steps:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. Start by clicking the button below:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;insideAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;display&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Create \${type!!.expression()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;payload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;clickAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;targetAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;createProject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;projectType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${type!!.value}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>Action</strong>: Single value message</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>2. In the &quot;Create mode&quot; section, select &quot;Clone from&quot;.</span></span>
<span class="line"><span>3. Select the target organization.</span></span>
<span class="line"><span>4. Select the target project.</span></span>
<span class="line"><span>5. Click the &quot;Clone&quot; button.</span></span></code></pre></div></li></ol></details><p>Similarly, the <a href="https://build.opencui.io/org/ai.bethere/agent/quickstarts/en/intent/64b897ae0f50353c647ca7e2" target="_blank" rel="noreferrer">TestChatbot</a> skill can be created. Unlike the CloneProject skill, the debug action can be executed within the chatbot itself. Once app users are in the target chatbot, no parameters are required to execute the debug action.</p><p>This is the happy path for TestChatbot skill:</p><p><img src="`+l+'" alt="Happy path of TestChatbot skill"></p><h3 id="build-a-composite-skill" tabindex="-1">Build a composite skill <a class="header-anchor" href="#build-a-composite-skill" aria-label="Permalink to &quot;Build a composite skill&quot;">​</a></h3><p>To build a composite skill for onboarding app users or combining multiple actions, follow these steps:</p><ol><li>Create a new skill and add the expression to trigger this skill.</li><li>Add component skills required for the onboarding procedure and initialize them with fixed parameters.</li><li>Add dialog annotations to add the missing information if necessary.</li><li>Add slots to verify if the app users have completed each step if necessary.</li></ol><p>For example, let&#39;s consider the <a href="https://build.opencui.io/org/ai.bethere/agent/quickstarts/en/intent/64b897ae0f50353c647ca7e3" target="_blank" rel="noreferrer">QuickStartClone</a> skill used to guide app users through the process of quickstart <a href="https://opencui.io/guide/clone-simple-chatbot.html" target="_blank" rel="noreferrer">cloning an echo chatbot</a>. The happy path for the QuickStartClone skill involves the following steps:</p><p><img src="'+n+'" alt="Happy path of QuickStartClone skill"></p><p>Let&#39;s see how to build this skill by following the above steps.</p><p><strong>1. Create a new skill: QuickStartClone</strong></p><p>In chatbot <em>ai.bethere.quickstarts</em>, we create a new skill with the label &quot;QuickStartClone&quot;. Since quickstarts are a series and cloning an echo chatbot is only part of them, we don&#39;t expect app users to trigger this skill directly.<br> Instead, we add this skill as a slot to another composite skill &quot;QuickStartGuide&quot;, which can be triggered by app users. Therefore, there is no expression for this skill QuickStartClone.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><p>Create a skill with label <code>CloneProject</code></p></details><p><strong>2. Add component skills</strong></p><p>As we&#39;ve built the skill &quot;CloneProject&quot; and skill &quot;TestChatbot&quot;, now we can add these skills as slots in the skill &quot;QuickStartClone&quot;. Since the cloned project is fixed in this quickstart, we can use the type-level <a href="./../reference/annotations/init.html#overview">initialization</a> to initialize the skill CloneProject with the predetermined parameters including project type, organization label and project label.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Add the following slots in skill QuickStartClone:</p><ul><li><code>cloneProject</code> with type <code>CloneProject</code></li><li><code>testChatbot</code> with type <code>TestChatbot</code></li></ul></li><li><p>Add type-level initialization for skill QuickStartClone:</p><ul><li>Fill slot <code>cloneProject.type</code> with value: <code>ProjectType(&quot;chatbot&quot;)</code></li><li>Fill slot <code>cloneProject.orgLabel</code> with value: <code>&quot;me.quickstart&quot;</code></li><li>Fill slot <code>cloneProject.projectLabel</code> with value: <code>&quot;pingpongSL&quot;</code></li></ul></li></ol></details><p><strong>3. Supplement the missing information</strong></p><p>In the quickstart cloning an echo chatbot, there is an instruction on what to send to test the chatbot. This instruction is not covered in this skill yet, so we add a <a href="./../reference/annotations/transition.html#condition-triggered-transitions">post-fill action</a> in the slot testChatbot to supplement the missing instruction. Additionally, as there is no response section for the composite skill currently, we add the concluding part here as well.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><p>Add annotation post-fill action for slot testChatbot:</p><ul><li><p><strong>Condition</strong>:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div></li><li><p><strong>Template</strong>:</p><p><em>[1] Enter &quot;ping&quot; after connecting and the chatbot will ask for a location.</em></p><p><em>[2] Send a legit location like &quot;Seattle&quot;, and the chatbot will respond with &quot;Pong Seattle&quot;.</em></p><p><em>Congratulations on successfully cloning your chatbot! For more details, refer to <a href="https://opencui.io/guide/clone-simple-chatbot.html" target="_blank" rel="noreferrer">https://opencui.io/guide/clone-simple-chatbot.html</a></em></p></li></ul></details><p><strong>4. Add slots to check the cloning step</strong></p><p>To ensure that app users complete each step of the cloning process, it&#39;s helpful to guide them through the steps one by one. After showing them how to clone the echo chatbot, we want to confirm if they have finished this step. To achieve this, we add a boolean slot. If their answer is negative, copilot will prompt them to complete the cloning step before proceeding to the next step.</p><details class="details custom-block"><summary>Details with OpenCUI Copilot as an example</summary><ol><li><p>Add the following slot in skill CloneProject:</p><ul><li><code>isNewChatbotPage</code> with type <code>boolean</code></li></ul></li><li><p>Add annotation for slot isTargetPage:</p><ul><li><strong>Fill strategy</strong>: Always ask</li><li><strong>Prompt</strong>: <em>Have you created a duplicated chatbot?</em></li><li><strong>Value check</strong>: <ul><li><strong>Condition</strong>:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isNewChatbotPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><ul><li><strong>Template</strong>: <em>Before proceeding to the next step, please follow the steps provided above to clone the chatbot first.</em></li></ul></li></ul></li></ol></details>',57),h=[p];function r(c,d,k,u,g,y){return s(),e("div",null,h)}const m=t(o,[["render",r]]);export{b as __pageData,m as default};
